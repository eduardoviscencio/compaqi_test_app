// Mocks generated by Mockito 5.4.6 from annotations
// in compaqi_test_app/test/mocks/shared_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:compaqi_test_app/application/use_cases/auth/biometrics_use_case.dart'
    as _i9;
import 'package:compaqi_test_app/application/use_cases/auth/login_use_case.dart'
    as _i3;
import 'package:compaqi_test_app/application/use_cases/auth/logout_use_case.dart'
    as _i5;
import 'package:compaqi_test_app/application/use_cases/locations/add_location_use_case.dart'
    as _i7;
import 'package:compaqi_test_app/application/use_cases/locations/delete_location_use_case.dart'
    as _i8;
import 'package:compaqi_test_app/application/use_cases/locations/get_saved_locations_use_case.dart'
    as _i6;
import 'package:compaqi_test_app/domain/models/models.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUser_0 extends _i1.SmartFake implements _i2.User {
  _FakeUser_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [LoginUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginUseCase extends _i1.Mock implements _i3.LoginUseCase {
  MockLoginUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.User> execute() =>
      (super.noSuchMethod(
            Invocation.method(#execute, []),
            returnValue: _i4.Future<_i2.User>.value(
              _FakeUser_0(this, Invocation.method(#execute, [])),
            ),
          )
          as _i4.Future<_i2.User>);

  @override
  _i4.Future<bool> isLoggedIn() =>
      (super.noSuchMethod(
            Invocation.method(#isLoggedIn, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<_i2.User> getLoggedUser() =>
      (super.noSuchMethod(
            Invocation.method(#getLoggedUser, []),
            returnValue: _i4.Future<_i2.User>.value(
              _FakeUser_0(this, Invocation.method(#getLoggedUser, [])),
            ),
          )
          as _i4.Future<_i2.User>);
}

/// A class which mocks [LogoutUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogoutUseCase extends _i1.Mock implements _i5.LogoutUseCase {
  MockLogoutUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> execute() =>
      (super.noSuchMethod(
            Invocation.method(#execute, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [GetSavedLocationsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetSavedLocationsUseCase extends _i1.Mock
    implements _i6.GetSavedLocationsUseCase {
  MockGetSavedLocationsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.Location>?> execute() =>
      (super.noSuchMethod(
            Invocation.method(#execute, []),
            returnValue: _i4.Future<List<_i2.Location>?>.value(),
          )
          as _i4.Future<List<_i2.Location>?>);
}

/// A class which mocks [AddLocationUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddLocationUseCase extends _i1.Mock
    implements _i7.AddLocationUseCase {
  MockAddLocationUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Location?> execute(_i2.Location? location) =>
      (super.noSuchMethod(
            Invocation.method(#execute, [location]),
            returnValue: _i4.Future<_i2.Location?>.value(),
          )
          as _i4.Future<_i2.Location?>);
}

/// A class which mocks [DeleteLocationUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteLocationUseCase extends _i1.Mock
    implements _i8.DeleteLocationUseCase {
  MockDeleteLocationUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> execute(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#execute, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [BiometricsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockBiometricsUseCase extends _i1.Mock implements _i9.BiometricsUseCase {
  MockBiometricsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> execute() =>
      (super.noSuchMethod(
            Invocation.method(#execute, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> isBiometricsAvailable() =>
      (super.noSuchMethod(
            Invocation.method(#isBiometricsAvailable, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);
}
